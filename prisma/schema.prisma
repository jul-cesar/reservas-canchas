generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model canchas {
  IDCancha       Int            @id @default(autoincrement())
  Nombre         String       @db.VarChar(50)
  ImgURL         String?
  Descripcion    String        @db.Text
  TipoSuperficie TipoSuperficie
  Disponibilidad Disponibilidad
  Precio         Decimal      @db.Decimal(10, 3)
  reservas       reservas[]
}

enum TipoSuperficie {
  sintetica
  cesped
}

enum Disponibilidad {
  Disponible
  NoDisponible
}

model facturas {
  IDFactura    Int        @id @default(autoincrement())
  IDReserva    Int?       @unique
  MontoTotal   Decimal?   @db.Decimal(10, 3)
  FechaEmision DateTime?  @default(now()) 
  EstadoPago   EstadoPago
  reservas     reservas?  @relation(fields: [IDReserva], references: [IDReserva], onDelete: NoAction, onUpdate: NoAction, map: "facturas_ibfk_1")

  
}

enum EstadoPago {
  Pagada
  Pendiente
}

model notificaciones {
  IDNotificacion Int       @id @default(autoincrement())
  IDUsuario      Int?
  Tipo           Tipo
  Mensaje        String   @db.Text
  FechaHoraEnvio DateTime  @default(now()) 
  usuarios       usuarios? @relation(fields: [IDUsuario], references: [IDUsuario], onDelete: NoAction, onUpdate: NoAction, map: "notificaciones_ibfk_1")

 
}

enum Tipo {
  Confirmacion
  Recordatorio
  Actualizacion
}

model reservas {
  IDReserva              Int                      @id @default(autoincrement())
  IDUsuario              Int
  IDCancha               Int
  Fecha                  DateTime                 @default(now()) 
  HoraInicio             DateTime                @default(now())
  Duracion               Int?
  Estado                 Estado
  MetodoPago             MetodoPago
  MontoPagado            Decimal?                 @db.Decimal(10, 3)
  facturas               facturas[]
  usuarios               usuarios                 @relation(fields: [IDUsuario], references: [IDUsuario], onDelete: NoAction, onUpdate: NoAction, map: "reservas_ibfk_1")
  canchas                canchas                  @relation(fields: [IDCancha], references: [IDCancha], onDelete: Cascade, onUpdate: Cascade, map: "reservas_ibfk_2")
  suministrosadicionales suministrosadicionales[]

  @@index([IDCancha], map: "IDCancha")
  @@index([IDUsuario], map: "IDUsuario")
}

enum Estado {
  Confirmada
  Pendiente
}

enum MetodoPago {
  TarjetaDeCredito
  TarjetaDeDebito
  TransferenciaBancaria
  Efectivo
}

model suministrosadicionales {
  IDSuministro   Int       @id @default(autoincrement())
  IDReserva      Int?
  TipoSuministro String?   @db.VarChar(50)
  Cantidad       Int?
  CostoUnitario  Decimal?  @db.Decimal(10, 3)
  reservas       reservas? @relation(fields: [IDReserva], references: [IDReserva], onDelete: NoAction, onUpdate: NoAction, map: "suministrosadicionales_ibfk_1")

  @@index([IDReserva], map: "IDReserva")
}

model usuarios {
  IDUsuario         Int              @id @default(autoincrement())
  Nombre            String?          @db.VarChar(50)
  Apellido          String?          @db.VarChar(50)
  CorreoElectronico String?          @db.VarChar(100)
  Contrase_a        String?          @map("Contrase√±a") @db.VarChar(50)
  Telefono          String?          @db.VarChar(15)
  Rol               String?          @db.VarChar(20)
  DatosPago         String?          @db.VarChar(100)
  notificaciones    notificaciones[]
  reservas          reservas[]
}

enum Rol {
  User
  Admin
}
